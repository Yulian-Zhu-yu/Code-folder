{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor leftMotorA = motor(PORT1, ratio18_1, false);\nmotor leftMotorB = motor(PORT11, ratio18_1, false);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT10, ratio18_1, true);\nmotor rightMotorB = motor(PORT20, ratio18_1, true);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 40, mm, 1);\n\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool DrivetrainNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis2 + Axis1\n      // right = Axis2 - Axis1\n      int drivetrainLeftSideSpeed = Controller1.Axis2.position() + Controller1.Axis1.position();\n      int drivetrainRightSideSpeed = Controller1.Axis2.position() - Controller1.Axis1.position();\n      \n      // check if the values are inside of the deadband range\n      if (abs(drivetrainLeftSideSpeed) < 5 && abs(drivetrainRightSideSpeed) < 5) {\n        // check if the motors have already been stopped\n        if (DrivetrainNeedsToBeStopped_Controller1) {\n          // stop the drive motors\n          LeftDriveSmart.stop();\n          RightDriveSmart.stop();\n          // tell the code that the motors have been stopped\n          DrivetrainNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the motors next time the input is in the deadband range\n        DrivetrainNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n#pragma endregion VEXcode Generated Robot Configuration\n#include <vex.h>\nusing namespace vex;\nint Brain_precision = 0, Console_precision = 0, Controller1_precision = 0;\n\n// when started\nint whenStarted() {\n  Drivetrain.setDriveVelocity(90, percent);\n  Drivetrain.setTurnVelocity(90, percent);\n  Drivetrain.driveFor(forward, 1000.0, mm, true);\n  Drivetrain.driveFor(reverse, 1000.0, mm, true);\n  Drivetrain.turnFor(right, 180.0, degrees, true);\n  Drivetrain.turnFor(left, 180.0, degrees, true);\n  Brain.Screen.print(\"Starting block done\\n\");\n  return 0;\n}\n \n// stopping\nvoid Stopping(){\n  Drivetrain.stop();\n}\n\n// button up\nvoid Button_Up() {\n  Brain.Screen.print(\"Up\\n\");\n  Drivetrain.setDriveVelocity(90, percent);\n  leftMotorA.spin(forward);\n}\n\n// button down\nvoid Button_Down() {\n  Brain.Screen.print(\"\");\n  Brain.Screen.print(\"Down\\n\");\n}\n \n// left\nvoid Button_Left() {\n  Brain.Screen.print(\"\");\n  Brain.Screen.print(\"Left\\n\");\n}\n\n// right\nvoid Button_Right() {\n  Brain.Screen.print(\"\");\n  Brain.Screen.print(\"Right\\n\");\n}\n\n// l1\nvoid Button_L1() {\n  Brain.Screen.print(\"\");\n  Brain.Screen.print(\"L1\\n\");\n}\n\n// r1\nvoid Button_R1() {\n  Brain.Screen.print(\"\");\n  Brain.Screen.print(\"R1\\n\");\n}\n \n \nint main() {\n  // register event handlers\n  Controller1.ButtonUp.pressed(Button_Up);\n  Controller1.ButtonUp.released(Stopping);\n  Controller1.ButtonDown.pressed(Button_Down);\n  Controller1.ButtonLeft.pressed(Button_Left);\n  Controller1.ButtonRight.pressed(Button_Right);\n  Controller1.ButtonL1.pressed(Button_L1);\n  Controller1.ButtonR1.pressed(Button_R1);\n  \n  wait(15, msec);\n  whenStarted();\n}\n\n","textLanguage":"cpp","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"arcader","id":"primary"},"triportSourcePort":22},{"port":[1,11,10,20,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}